import { createTool } from "@iqai/adk";
import * as z from "zod";

export const explainConceptTool = createTool({
  name: "explain_concept",
  description: "Explain educational concepts with examples and analogies",
  schema: z.object({
    concept: z.string().describe("The concept to explain"),
    subject: z
      .string()
      .describe("Subject area (e.g., math, science, programming)"),
    level: z
      .enum(["beginner", "intermediate", "advanced"])
      .describe("Difficulty level"),
    include_examples: z
      .boolean()
      .default(true)
      .describe("Include practical examples"),
  }),
  fn: async ({ concept, subject, level, include_examples }) => {
    // This tool provides structured data for the LLM to use in its response
    // The actual explanation will be generated by the LLM using this context
    return {
      success: true,
      concept,
      subject,
      level,
      include_examples,
      context: `Explain the concept "${concept}" in ${subject} at a ${level} level.`,
      guidelines: [
        "Use clear, simple language appropriate for the level",
        "Break down complex ideas into digestible parts",
        "Use analogies and real-world connections",
        include_examples
          ? "Provide practical examples and use cases"
          : "Focus on conceptual understanding",
        "Structure the explanation logically",
        "End with key takeaways",
      ],
      message: `Ready to explain ${concept} in ${subject} at ${level} level`,
    };
  },
});

export const createQuizTool = createTool({
  name: "create_quiz",
  description: "Generate educational quiz questions on specific topics",
  schema: z.object({
    topic: z.string().describe("Quiz topic"),
    subject: z.string().describe("Subject area"),
    num_questions: z
      .number()
      .min(1)
      .max(10)
      .default(5)
      .describe("Number of questions"),
    question_type: z
      .enum(["multiple_choice", "true_false", "short_answer", "mixed"])
      .default("multiple_choice"),
    difficulty: z.enum(["easy", "medium", "hard"]).describe("Quiz difficulty"),
  }),
  fn: async ({ topic, subject, num_questions, question_type, difficulty }) => {
    return {
      success: true,
      quiz_config: {
        topic,
        subject,
        num_questions,
        question_type,
        difficulty,
      },
      instructions: `Create a ${difficulty} quiz about "${topic}" in ${subject} with ${num_questions} ${question_type} questions.`,
      format_requirements: [
        "Include clear questions appropriate for the difficulty level",
        "For multiple choice: provide 4 options with one correct answer",
        "For true/false: provide clear statements",
        "For short answer: ask for specific, concise responses",
        "Include brief explanations for correct answers",
        "Make questions challenging but fair for the difficulty level",
      ],
      message: `Quiz parameters set for ${num_questions} ${question_type} questions on ${topic}`,
    };
  },
});

export const solveProblemTool = createTool({
  name: "solve_problem",
  description: "Provide step-by-step problem solving guidance",
  schema: z.object({
    problem: z.string().describe("The problem to solve"),
    subject: z.string().describe("Subject area"),
    show_steps: z
      .boolean()
      .default(true)
      .describe("Show step-by-step solution"),
    explain_concepts: z
      .boolean()
      .default(true)
      .describe("Explain underlying concepts"),
  }),
  fn: async ({ problem, subject, show_steps, explain_concepts }) => {
    return {
      success: true,
      problem_context: {
        problem,
        subject,
        show_steps,
        explain_concepts,
      },
      solving_approach: [
        "Identify what is being asked",
        "Determine what information is given",
        "Choose the appropriate method or formula",
        show_steps
          ? "Show each step of the solution process"
          : "Provide direct solution",
        explain_concepts
          ? "Explain the concepts and principles used"
          : "Focus on the solution",
        "Provide the final answer clearly",
        "Verify the solution makes sense",
      ],
      message: `Ready to solve ${subject} problem with ${show_steps ? "detailed steps" : "direct approach"}`,
    };
  },
});

export const createStudyPlanTool = createTool({
  name: "create_study_plan",
  description: "Generate personalized study plans for learning goals",
  schema: z.object({
    subject: z.string().describe("Subject to study"),
    current_level: z
      .enum(["beginner", "intermediate", "advanced"])
      .describe("Current knowledge level"),
    target_level: z
      .enum(["intermediate", "advanced", "expert"])
      .describe("Target knowledge level"),
    time_available: z
      .string()
      .describe("Available study time (e.g., '2 hours/day', '10 hours/week')"),
    deadline: z.string().optional().describe("Target completion date"),
    focus_areas: z
      .array(z.string())
      .optional()
      .describe("Specific areas to focus on"),
  }),
  fn: async ({
    subject,
    current_level,
    target_level,
    time_available,
    deadline,
    focus_areas,
  }) => {
    return {
      success: true,
      study_plan_config: {
        subject,
        current_level,
        target_level,
        time_available,
        deadline: deadline || "No specific deadline",
        focus_areas: focus_areas || ["General comprehensive coverage"],
      },
      plan_structure: [
        "Assessment of current level and gap analysis",
        "Learning objectives and milestones",
        "Weekly topic breakdown",
        "Daily study activities and time allocation",
        "Recommended resources and materials",
        "Practice exercises and assessments",
        "Progress checkpoints and review sessions",
        "Tips for effective learning and retention",
      ],
      message: `Study plan framework ready for ${subject} (${current_level} â†’ ${target_level})`,
    };
  },
});

export const getTutorHelpTool = createTool({
  name: "get_tutor_help",
  description: "Get general tutoring assistance and learning tips",
  schema: z.object({
    help_type: z
      .enum([
        "study_tips",
        "learning_strategies",
        "motivation",
        "time_management",
        "exam_prep",
      ])
      .describe("Type of help needed"),
    subject: z.string().optional().describe("Specific subject (optional)"),
  }),
  fn: async ({ help_type, subject }) => {
    const help_content = {
      study_tips: {
        focus: "Effective study techniques and methods",
        areas: [
          "Note-taking strategies",
          "Active reading",
          "Memory techniques",
          "Review methods",
        ],
      },
      learning_strategies: {
        focus: "Different approaches to learning",
        areas: [
          "Visual learning",
          "Auditory learning",
          "Kinesthetic learning",
          "Learning style assessment",
        ],
      },
      motivation: {
        focus: "Staying motivated and overcoming challenges",
        areas: [
          "Goal setting",
          "Progress tracking",
          "Overcoming obstacles",
          "Maintaining consistency",
        ],
      },
      time_management: {
        focus: "Organizing study time effectively",
        areas: [
          "Scheduling techniques",
          "Prioritization",
          "Avoiding procrastination",
          "Work-life balance",
        ],
      },
      exam_prep: {
        focus: "Comprehensive exam preparation",
        areas: [
          "Review strategies",
          "Practice testing",
          "Stress management",
          "Test-taking techniques",
        ],
      },
    };

    return {
      success: true,
      help_type,
      subject: subject || "general",
      guidance_focus: help_content[help_type].focus,
      key_areas: help_content[help_type].areas,
      context: `Provide ${help_type} guidance${subject ? ` for ${subject}` : ""}`,
      message: `Ready to provide ${help_type} guidance${subject ? ` for ${subject}` : ""}`,
    };
  },
});
